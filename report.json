{
    "files": [
        {
            "file": "examples/assign_condition.js",
            "maxScore": 9000,
            "score": 147435,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "\"alert\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 13,
                            "column": 2
                        },
                        "end": {
                            "line": 13,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "\tdefault:\n\t\talert(x);\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "Unexpected alert.",
                    "desc": "JavaScripts' alert, confirm, and prompt functions are widely considered to be obtrusive as UI elements and should be replaced by a more appropriate custom UI implementation. Furthermore, alert is often used while debugging code, which should be removed before deployment to production.",
                    "loc": {
                        "start": {
                            "line": 13,
                            "column": 2
                        },
                        "end": {
                            "line": 13,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "\tdefault:\n\t\talert(x);\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "'alert' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 13,
                            "column": 2
                        },
                        "end": {
                            "line": 13,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "\tdefault:\n\t\talert(x);\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "'alert' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 10,
                            "column": 2
                        },
                        "end": {
                            "line": 10,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "\tcase 1:\n\t\talert(x);\n\t\tbreak;\n\tdefault:"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "Unexpected alert.",
                    "desc": "JavaScripts' alert, confirm, and prompt functions are widely considered to be obtrusive as UI elements and should be replaced by a more appropriate custom UI implementation. Furthermore, alert is often used while debugging code, which should be removed before deployment to production.",
                    "loc": {
                        "start": {
                            "line": 10,
                            "column": 2
                        },
                        "end": {
                            "line": 10,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "\tcase 1:\n\t\talert(x);\n\t\tbreak;\n\tdefault:"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "\"alert\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 10,
                            "column": 2
                        },
                        "end": {
                            "line": 10,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "\tcase 1:\n\t\talert(x);\n\t\tbreak;\n\tdefault:"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "\"alert\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 1
                        },
                        "end": {
                            "line": 5,
                            "column": 1
                        }
                    },
                    "score": 9000,
                    "code": "} else if (x = 5) {\n\talert(x);\n}\n"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "'alert' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 1
                        },
                        "end": {
                            "line": 5,
                            "column": 1
                        }
                    },
                    "score": 9000,
                    "code": "} else if (x = 5) {\n\talert(x);\n}\n"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "Unexpected alert.",
                    "desc": "JavaScripts' alert, confirm, and prompt functions are widely considered to be obtrusive as UI elements and should be replaced by a more appropriate custom UI implementation. Furthermore, alert is often used while debugging code, which should be removed before deployment to production.",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 1
                        },
                        "end": {
                            "line": 5,
                            "column": 1
                        }
                    },
                    "score": 9000,
                    "code": "} else if (x = 5) {\n\talert(x);\n}\n"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "Unexpected constant condition.",
                    "desc": "Comparing a literal expression in a condition is usually a typo or development trigger for a specific behavior.",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 7
                        },
                        "end": {
                            "line": 4,
                            "column": 7
                        }
                    },
                    "score": 9000,
                    "code": "\talert(x);\n} else if (x = 5) {\n\talert(x);\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "Expected a conditional expression and instead saw an assignment.",
                    "desc": "In conditional statements, it is very easy to mistype a comparison operator (such as ==) as an assignment operator (such as =).",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 7
                        },
                        "end": {
                            "line": 4,
                            "column": 7
                        }
                    },
                    "score": 9000,
                    "code": "\talert(x);\n} else if (x = 5) {\n\talert(x);\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "'alert' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 1
                        },
                        "end": {
                            "line": 3,
                            "column": 1
                        }
                    },
                    "score": 9000,
                    "code": "if (x = 3) {\n\talert(x);\n} else if (x = 5) {\n\talert(x);"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "\"alert\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 1
                        },
                        "end": {
                            "line": 3,
                            "column": 1
                        }
                    },
                    "score": 9000,
                    "code": "if (x = 3) {\n\talert(x);\n} else if (x = 5) {\n\talert(x);"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "Unexpected alert.",
                    "desc": "JavaScripts' alert, confirm, and prompt functions are widely considered to be obtrusive as UI elements and should be replaced by a more appropriate custom UI implementation. Furthermore, alert is often used while debugging code, which should be removed before deployment to production.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 1
                        },
                        "end": {
                            "line": 3,
                            "column": 1
                        }
                    },
                    "score": 9000,
                    "code": "if (x = 3) {\n\talert(x);\n} else if (x = 5) {\n\talert(x);"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "Expected a conditional expression and instead saw an assignment.",
                    "desc": "In conditional statements, it is very easy to mistype a comparison operator (such as ==) as an assignment operator (such as =).",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "var x;\nif (x = 3) {\n\talert(x);\n} else if (x = 5) {"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "Unexpected constant condition.",
                    "desc": "Comparing a literal expression in a condition is usually a typo or development trigger for a specific behavior.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "var x;\nif (x = 3) {\n\talert(x);\n} else if (x = 5) {"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 14,
                            "column": 1
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"62\" [1-100].",
                    "desc": "",
                    "score": 1913,
                    "value": 61,
                    "noPlace": true,
                    "code": "var x;\nif (x = 3) {\n\talert(x);\n} else if (x = 5) {\n\talert(x);\n}\n\nswitch (x = 7) {\n\tcase 1:\n\t\talert(x);\n\t\tbreak;\n\tdefault:\n\t\talert(x);\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 14,
                            "column": 1
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"1453\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 1453,
                    "value": 1453,
                    "noPlace": true,
                    "code": "var x;\nif (x = 3) {\n\talert(x);\n} else if (x = 5) {\n\talert(x);\n}\n\nswitch (x = 7) {\n\tcase 1:\n\t\talert(x);\n\t\tbreak;\n\tdefault:\n\t\talert(x);\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 14,
                            "column": 1
                        },
                        "end": {
                            "line": 14,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\t\talert(x);\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_condition.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 14,
                            "column": 1
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"3\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 19,
                    "value": 3,
                    "noPlace": true,
                    "code": "var x;\nif (x = 3) {\n\talert(x);\n} else if (x = 5) {\n\talert(x);\n}\n\nswitch (x = 7) {\n\tcase 1:\n\t\talert(x);\n\t\tbreak;\n\tdefault:\n\t\talert(x);\n}"
                }
            ],
            "halstead": 1453,
            "cyclomatic": 3,
            "maintainability": 61
        },
        {
            "file": "examples/eval.js",
            "maxScore": 90000,
            "score": 136058,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/eval.js",
                    "text": "eval can be harmful.",
                    "desc": "JavaScript's eval() function is potentially dangerous and is often misused. Using eval() on untrusted code can open a program up to several different injection attacks. The use of eval() in most contexts can be substituted for a better, alternative approach to a problem.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 90000,
                    "code": "eval('1==2');\r\nwindow.eval('1==2');\r\nwindow['eval']('1==2');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/eval.js",
                    "text": "'window' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "window.eval('1==2');\r\nwindow['eval']('1==2');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/eval.js",
                    "text": "\"window\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "window.eval('1==2');\r\nwindow['eval']('1==2');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/eval.js",
                    "text": "[\"eval\"] is better written in dot notation.",
                    "desc": "In JavaScript, one can access properties using the dot notation (foo.bar) or square-bracket notation (foo[\"bar\"]). However, the dot notation is often preferred because it is easier to read, less verbose, and works better with aggressive JavaScript minimizers.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "window.eval('1==2');\r\nwindow['eval']('1==2');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/eval.js",
                    "text": "'window' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "eval('1==2');\r\nwindow.eval('1==2');\r\nwindow['eval']('1==2');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/eval.js",
                    "text": "\"window\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "eval('1==2');\r\nwindow.eval('1==2');\r\nwindow['eval']('1==2');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/eval.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 23
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"81\" [1-100].",
                    "desc": "",
                    "score": 941,
                    "value": 81,
                    "noPlace": true,
                    "code": "eval('1==2');\r\nwindow.eval('1==2');\r\nwindow['eval']('1==2');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/eval.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 23
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"67\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 67,
                    "value": 67,
                    "noPlace": true,
                    "code": "eval('1==2');\r\nwindow.eval('1==2');\r\nwindow['eval']('1==2');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/eval.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 1
                        },
                        "end": {
                            "line": 3,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "window.eval('1==2');\r\nwindow['eval']('1==2');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/eval.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 23
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "eval('1==2');\r\nwindow.eval('1==2');\r\nwindow['eval']('1==2');"
                }
            ],
            "halstead": 67,
            "cyclomatic": 1,
            "maintainability": 81
        },
        {
            "file": "examples/compare_literal.js",
            "maxScore": 9000,
            "score": 116559,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 6,
                            "column": 0
                        },
                        "end": {
                            "line": 6,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected literal to be on the right side of >=.",
                    "desc": "Proponents of Yoda conditions highlight that it is impossible to mistakenly use = instead of == because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on.",
                    "loc": {
                        "start": {
                            "line": 6,
                            "column": 0
                        },
                        "end": {
                            "line": 6,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected literal to be on the right side of >.",
                    "desc": "Proponents of Yoda conditions highlight that it is impossible to mistakenly use = instead of == because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on.",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 0
                        },
                        "end": {
                            "line": 5,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 <= 2;\r\n1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 0
                        },
                        "end": {
                            "line": 5,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 <= 2;\r\n1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected literal to be on the right side of <=.",
                    "desc": "Proponents of Yoda conditions highlight that it is impossible to mistakenly use = instead of == because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on.",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 < 2;\r\n1 <= 2;\r\n1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 < 2;\r\n1 <= 2;\r\n1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r\n1 > 2;\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected literal to be on the right side of <.",
                    "desc": "Proponents of Yoda conditions highlight that it is impossible to mistakenly use = instead of == because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r\n1 > 2;\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected literal to be on the right side of !==.",
                    "desc": "Proponents of Yoda conditions highlight that it is impossible to mistakenly use = instead of == because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 === 2;\r\n1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 === 2;\r\n1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 === 2;\r\n1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Expected literal to be on the right side of ===.",
                    "desc": "Proponents of Yoda conditions highlight that it is impossible to mistakenly use = instead of == because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 === 2;\r\n1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 6,
                            "column": 7
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"69\" [1-100].",
                    "desc": "",
                    "score": 1537,
                    "value": 69,
                    "noPlace": true,
                    "code": "1 === 2;\r\n1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r\n1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "loc": {
                        "start": {
                            "line": 6,
                            "column": 0
                        },
                        "end": {
                            "line": 6,
                            "column": 6
                        }
                    },
                    "text": ">= ska inte användas mellan två literära datatyper",
                    "desc": "1 >= 2 kommer alltid procducera samma boolean värde",
                    "score": 1000,
                    "code": "1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 0
                        },
                        "end": {
                            "line": 5,
                            "column": 5
                        }
                    },
                    "text": "> ska inte användas mellan två literära datatyper",
                    "desc": "1 > 2 kommer alltid procducera samma boolean värde",
                    "score": 1000,
                    "code": "1 <= 2;\r\n1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 6
                        }
                    },
                    "text": "<= ska inte användas mellan två literära datatyper",
                    "desc": "1 <= 2 kommer alltid procducera samma boolean värde",
                    "score": 1000,
                    "code": "1 < 2;\r\n1 <= 2;\r\n1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 5
                        }
                    },
                    "text": "< ska inte användas mellan två literära datatyper",
                    "desc": "1 < 2 kommer alltid procducera samma boolean värde",
                    "score": 1000,
                    "code": "1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r\n1 > 2;\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 7
                        }
                    },
                    "text": "!== ska inte användas mellan två literära datatyper",
                    "desc": "1 !== 2 kommer alltid procducera samma boolean värde",
                    "score": 1000,
                    "code": "1 === 2;\r\n1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 7
                        }
                    },
                    "text": "=== ska inte användas mellan två literära datatyper",
                    "desc": "1 === 2 kommer alltid procducera samma boolean värde",
                    "score": 1000,
                    "code": "1 === 2;\r\n1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 6,
                            "column": 7
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"972\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 972,
                    "value": 972,
                    "noPlace": true,
                    "code": "1 === 2;\r\n1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r\n1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 6,
                            "column": 1
                        },
                        "end": {
                            "line": 6,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "1 > 2;\r\n1 >= 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/compare_literal.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 6,
                            "column": 7
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "1 === 2;\r\n1 !== 2;\r\n1 < 2;\r\n1 <= 2;\r\n1 > 2;\r\n1 >= 2;"
                }
            ],
            "halstead": 972,
            "cyclomatic": 1,
            "maintainability": 69
        },
        {
            "file": "examples/finally.js",
            "maxScore": 9000,
            "score": 64218,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "text": "'custom_log' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 6,
                            "column": 2
                        },
                        "end": {
                            "line": 6,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "\t} catch (e) {\n\t\tcustom_log(e);\n\t} finally {\n\t\treturn;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "text": "\"custom_log\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 6,
                            "column": 2
                        },
                        "end": {
                            "line": 6,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "\t} catch (e) {\n\t\tcustom_log(e);\n\t} finally {\n\t\treturn;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "text": "'badFn' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 2
                        },
                        "end": {
                            "line": 4,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "\ttry {\n\t\tbadFn();\n\t} catch (e) {\n\t\tcustom_log(e);"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "text": "\"badFn\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 2
                        },
                        "end": {
                            "line": 4,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "\ttry {\n\t\tbadFn();\n\t} catch (e) {\n\t\tcustom_log(e);"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "text": "Wrapping non-IIFE function literals in parens is unnecessary.",
                    "desc": "Although it's possible to wrap functions in parentheses, this can be confusing when the code also contains immediately-invoked function expressions (IIFEs) since parentheses are often used to make this distinction. ",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 1
                        },
                        "end": {
                            "line": 1,
                            "column": 1
                        }
                    },
                    "score": 9000,
                    "code": "(function wrapper() {\n\t'use strict';\n\ttry {\n\t\tbadFn();"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "(function wrapper() {\n\t'use strict';\n\ttry {\n\t\tbadFn();"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 1
                        },
                        "end": {
                            "line": 9,
                            "column": 2
                        }
                    },
                    "text": "finally ska aldrig användas.",
                    "desc": "Kan ge upphov till extremt konstigt programflöde!",
                    "score": 9000,
                    "code": "\t'use strict';\n\ttry {\n\t\tbadFn();\n\t} catch (e) {\n\t\tcustom_log(e);\n\t} finally {\n\t\treturn;\n\t}\n});"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 10,
                            "column": 3
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"78\" [1-100].",
                    "desc": "",
                    "score": 1092,
                    "value": 78,
                    "noPlace": true,
                    "code": "(function wrapper() {\n\t'use strict';\n\ttry {\n\t\tbadFn();\n\t} catch (e) {\n\t\tcustom_log(e);\n\t} finally {\n\t\treturn;\n\t}\n});"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 10,
                            "column": 1
                        },
                        "end": {
                            "line": 10,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\t}\n});"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "text": "Missing space before function parentheses.",
                    "desc": "When formatting a function, whitespace is allowed between the function name or function keyword and the opening paren. Named functions also require a space between the function keyword and the function name, but anonymous functions require no whitespace.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 17
                        },
                        "end": {
                            "line": 1,
                            "column": 17
                        }
                    },
                    "score": 50,
                    "code": "(function wrapper() {\n\t'use strict';\n\ttry {\n\t\tbadFn();"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 10,
                            "column": 3
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"26\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 26,
                    "value": 25,
                    "noPlace": true,
                    "code": "(function wrapper() {\n\t'use strict';\n\ttry {\n\t\tbadFn();\n\t} catch (e) {\n\t\tcustom_log(e);\n\t} finally {\n\t\treturn;\n\t}\n});"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/finally.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 10,
                            "column": 3
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"2\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 2,
                    "noPlace": true,
                    "code": "(function wrapper() {\n\t'use strict';\n\ttry {\n\t\tbadFn();\n\t} catch (e) {\n\t\tcustom_log(e);\n\t} finally {\n\t\treturn;\n\t}\n});"
                }
            ],
            "halstead": 25,
            "cyclomatic": 2,
            "maintainability": 78
        },
        {
            "file": "examples/loop_types.js",
            "maxScore": 9000,
            "score": 57353,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "text": "All \"var\" declarations must be at the top of the function scope.",
                    "desc": "Variable declarations should be used serially at the top of a function scope or the top of a program. By default variable declarations are always moved (“hoisted”) invisibly to the top of their containing scope by the JavaScript interpreter. This rule forces the programmer to represent that behaviour by manually moving the variable declaration to the top of its containing scope.",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 5
                        },
                        "end": {
                            "line": 5,
                            "column": 5
                        }
                    },
                    "score": 9000,
                    "code": "\nfor (var i = 0; i < 10; i += 1) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "text": "'y' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 9
                        },
                        "end": {
                            "line": 3,
                            "column": 9
                        }
                    },
                    "score": 9000,
                    "code": "\td()\n} while (y);\n\nfor (var i = 0; i < 10; i += 1) {"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "text": "\"y\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 9
                        },
                        "end": {
                            "line": 3,
                            "column": 9
                        }
                    },
                    "score": 9000,
                    "code": "\td()\n} while (y);\n\nfor (var i = 0; i < 10; i += 1) {"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "text": "Missing semicolon.",
                    "desc": "JavaScript is unique amongst the C-like languages in that it doesn't require semicolons at the end of each statement. In many cases, the JavaScript engine can determine that a semicolon should be in a certain spot and will automatically add it. This feature is known as automatic semicolon insertion (ASI) and is considered one of the more controversial features of JavaScript. The rationale is that it's easier to always include semicolons than to try to remember when they are or are not required, and thus decreases the possibility of introducing an error. For example, consider this code:\n`return\n{\n    name: \"ESLint\"\n}`",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 4
                        },
                        "end": {
                            "line": 2,
                            "column": 4
                        }
                    },
                    "score": 9000,
                    "code": "do {\n\td()\n} while (y);\n"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "text": "'d' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 1
                        },
                        "end": {
                            "line": 2,
                            "column": 1
                        }
                    },
                    "score": 9000,
                    "code": "do {\n\td()\n} while (y);\n"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "text": "\"d\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 1
                        },
                        "end": {
                            "line": 2,
                            "column": 1
                        }
                    },
                    "score": 9000,
                    "code": "do {\n\td()\n} while (y);\n"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 7,
                            "column": 1
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"73\" [1-100].",
                    "desc": "",
                    "score": 1325,
                    "value": 73,
                    "noPlace": true,
                    "code": "do {\n\td()\n} while (y);\n\nfor (var i = 0; i < 10; i += 1) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 32
                        },
                        "end": {
                            "line": 7,
                            "column": 1
                        }
                    },
                    "text": "Tomma kodblock ska ej förekomma.",
                    "desc": "Om det är en if/else-if sats, så negera logiken, och ta bort blocket. Annars om syfte saknas så ta bort detta block!.",
                    "score": 1000,
                    "code": "\nfor (var i = 0; i < 10; i += 1) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "text": "Trailing spaces not allowed.",
                    "desc": "Sometimes in the course of editing files, you can end up with extra whitespace at the end of lines. These whitespace differences can be picked up by source control systems and flagged as diffs, causing frustration for developers. While this extra whitespace causes no functional issues, many code conventions require that trailing spaces be removed before checkin.",
                    "loc": {
                        "start": {
                            "line": 6,
                            "column": 1
                        },
                        "end": {
                            "line": 6,
                            "column": 1
                        }
                    },
                    "score": 500,
                    "code": "for (var i = 0; i < 10; i += 1) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 7,
                            "column": 1
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"259\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 259,
                    "value": 259,
                    "noPlace": true,
                    "code": "do {\n\td()\n} while (y);\n\nfor (var i = 0; i < 10; i += 1) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 0
                        },
                        "end": {
                            "line": 7,
                            "column": 1
                        }
                    },
                    "text": "Den enda tillåtna loop typen är WHILE.",
                    "desc": "De andra looptyperna är svårare att läsa och är while-loopar med extra syntax. Använd .forEach, .map, .filter, .reduce funktionerna för array:er istället.",
                    "score": 100,
                    "code": "\nfor (var i = 0; i < 10; i += 1) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 12
                        }
                    },
                    "text": "Den enda tillåtna loop typen är WHILE.",
                    "desc": "De andra looptyperna är svårare att läsa och är while-loopar med extra syntax. Använd .forEach, .map, .filter, .reduce funktionerna för array:er istället.",
                    "score": 100,
                    "code": "do {\n\td()\n} while (y);\n\nfor (var i = 0; i < 10; i += 1) {\n\t"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 7,
                            "column": 1
                        },
                        "end": {
                            "line": 7,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/loop_types.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 7,
                            "column": 1
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"3\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 19,
                    "value": 3,
                    "noPlace": true,
                    "code": "do {\n\td()\n} while (y);\n\nfor (var i = 0; i < 10; i += 1) {\n\t\n}"
                }
            ],
            "halstead": 259,
            "cyclomatic": 3,
            "maintainability": 73
        },
        {
            "file": "examples/dubble_equals.js",
            "maxScore": 9000,
            "score": 54720,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dubble_equals.js",
                    "text": "Expected '!==' and instead saw '!='.",
                    "desc": "It is considered good practice to use the type-safe equality operators === and !== instead of their regular counterparts == and !=. The reason for this is that == and != do type coercion which follows the rather obscure Abstract Equality Comparison Algorithm.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 2
                        },
                        "end": {
                            "line": 2,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "1 == 2;\r\n1 != 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dubble_equals.js",
                    "text": "Expected literal to be on the right side of !=.",
                    "desc": "Proponents of Yoda conditions highlight that it is impossible to mistakenly use = instead of == because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 == 2;\r\n1 != 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dubble_equals.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 == 2;\r\n1 != 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dubble_equals.js",
                    "text": "Expected '===' and instead saw '=='.",
                    "desc": "It is considered good practice to use the type-safe equality operators === and !== instead of their regular counterparts == and !=. The reason for this is that == and != do type coercion which follows the rather obscure Abstract Equality Comparison Algorithm.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 2
                        },
                        "end": {
                            "line": 1,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "1 == 2;\r\n1 != 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dubble_equals.js",
                    "text": "Expected literal to be on the right side of ==.",
                    "desc": "Proponents of Yoda conditions highlight that it is impossible to mistakenly use = instead of == because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 == 2;\r\n1 != 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dubble_equals.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 == 2;\r\n1 != 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dubble_equals.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 7
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"87\" [1-100].",
                    "desc": "",
                    "score": 646,
                    "value": 87,
                    "noPlace": true,
                    "code": "1 == 2;\r\n1 != 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dubble_equals.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 1
                        },
                        "end": {
                            "line": 2,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "1 == 2;\r\n1 != 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dubble_equals.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 7
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"24\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 24,
                    "value": 24,
                    "noPlace": true,
                    "code": "1 == 2;\r\n1 != 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dubble_equals.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 7
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "1 == 2;\r\n1 != 2;"
                }
            ],
            "halstead": 24,
            "cyclomatic": 1,
            "maintainability": 87
        },
        {
            "file": "examples/typeof.js",
            "maxScore": 9000,
            "score": 45724,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/typeof.js",
                    "text": "Invalid typeof comparison value",
                    "desc": "For a vast majority of use-cases, the only valid results of the typeof operator will be one of the following: \"undefined\", \"object\", \"boolean\", \"number\", \"string\", and \"function\". When the result of a typeof operation is compared against a string that is not one of these strings, it is usually a typo. This rule ensures that when the result of a typeof operation is compared against a string, that string is in the aforementioned set.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 13
                        },
                        "end": {
                            "line": 2,
                            "column": 13
                        }
                    },
                    "score": 9000,
                    "code": "typeof o === 'undefined';\r\ntypeof o === 'numbr';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/typeof.js",
                    "text": "\"o\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 7
                        },
                        "end": {
                            "line": 2,
                            "column": 7
                        }
                    },
                    "score": 9000,
                    "code": "typeof o === 'undefined';\r\ntypeof o === 'numbr';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/typeof.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "typeof o === 'undefined';\r\ntypeof o === 'numbr';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/typeof.js",
                    "text": "\"o\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 7
                        },
                        "end": {
                            "line": 1,
                            "column": 7
                        }
                    },
                    "score": 9000,
                    "code": "typeof o === 'undefined';\r\ntypeof o === 'numbr';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/typeof.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "typeof o === 'undefined';\r\ntypeof o === 'numbr';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/typeof.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 21
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"87\" [1-100].",
                    "desc": "",
                    "score": 649,
                    "value": 87,
                    "noPlace": true,
                    "code": "typeof o === 'undefined';\r\ntypeof o === 'numbr';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/typeof.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 1
                        },
                        "end": {
                            "line": 2,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "typeof o === 'undefined';\r\ntypeof o === 'numbr';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/typeof.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 21
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"25\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 25,
                    "value": 24,
                    "noPlace": true,
                    "code": "typeof o === 'undefined';\r\ntypeof o === 'numbr';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/typeof.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 21
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "typeof o === 'undefined';\r\ntypeof o === 'numbr';"
                }
            ],
            "halstead": 24,
            "cyclomatic": 1,
            "maintainability": 87
        },
        {
            "file": "examples/yoda.js",
            "maxScore": 9000,
            "score": 45139,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/yoda.js",
                    "text": "'a' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 5
                        },
                        "end": {
                            "line": 1,
                            "column": 5
                        }
                    },
                    "score": 9000,
                    "code": "1 == a;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/yoda.js",
                    "text": "\"a\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 5
                        },
                        "end": {
                            "line": 1,
                            "column": 5
                        }
                    },
                    "score": 9000,
                    "code": "1 == a;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/yoda.js",
                    "text": "Expected '===' and instead saw '=='.",
                    "desc": "It is considered good practice to use the type-safe equality operators === and !== instead of their regular counterparts == and !=. The reason for this is that == and != do type coercion which follows the rather obscure Abstract Equality Comparison Algorithm.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 2
                        },
                        "end": {
                            "line": 1,
                            "column": 2
                        }
                    },
                    "score": 9000,
                    "code": "1 == a;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/yoda.js",
                    "text": "Expected literal to be on the right side of ==.",
                    "desc": "Proponents of Yoda conditions highlight that it is impossible to mistakenly use = instead of == because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 == a;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/yoda.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1 == a;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/yoda.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 7
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"98\" [1-100].",
                    "desc": "",
                    "score": 87,
                    "value": 98,
                    "noPlace": true,
                    "code": "1 == a;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/yoda.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 1
                        },
                        "end": {
                            "line": 1,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "1 == a;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/yoda.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 7
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"2\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 2,
                    "value": 2,
                    "noPlace": true,
                    "code": "1 == a;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/yoda.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 7
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "1 == a;"
                }
            ],
            "halstead": 2,
            "cyclomatic": 1,
            "maintainability": 98
        },
        {
            "file": "examples/dynamic_prop_lookup.js",
            "maxScore": 9000,
            "score": 37964,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dynamic_prop_lookup.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 0
                        },
                        "end": {
                            "line": 5,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "o['a' + o.a];\no['a' + 'o'];"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dynamic_prop_lookup.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "o['a' + o];\no['a' + o.a];\no['a' + 'o'];"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dynamic_prop_lookup.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "o['a' + o()];\no['a' + o];\no['a' + o.a];\no['a' + 'o'];"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dynamic_prop_lookup.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "var o;\no['a' + o()];\no['a' + o];\no['a' + o.a];"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dynamic_prop_lookup.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 5,
                            "column": 13
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"72\" [1-100].",
                    "desc": "",
                    "score": 1389,
                    "value": 72,
                    "noPlace": true,
                    "code": "var o;\no['a' + o()];\no['a' + o];\no['a' + o.a];\no['a' + 'o'];"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dynamic_prop_lookup.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 5,
                            "column": 13
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"525\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 525,
                    "value": 525,
                    "noPlace": true,
                    "code": "var o;\no['a' + o()];\no['a' + o];\no['a' + o.a];\no['a' + 'o'];"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dynamic_prop_lookup.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 1
                        },
                        "end": {
                            "line": 5,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "o['a' + o.a];\no['a' + 'o'];"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/dynamic_prop_lookup.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 5,
                            "column": 13
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "var o;\no['a' + o()];\no['a' + o];\no['a' + o.a];\no['a' + 'o'];"
                }
            ],
            "halstead": 525,
            "cyclomatic": 1,
            "maintainability": 72
        },
        {
            "file": "examples/ternary.js",
            "maxScore": 9000,
            "score": 36197,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ternary.js",
                    "text": "'a' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "a ? 1 : 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ternary.js",
                    "text": "\"a\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "a ? 1 : 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ternary.js",
                    "text": "Ternary operator used.",
                    "desc": "The ternary operator is used to conditionally assign a value to a variable. The use of ternary operators leads to unclear code. Use if/else instead.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "a ? 1 : 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ternary.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "a ? 1 : 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ternary.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 10
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"97\" [1-100].",
                    "desc": "",
                    "score": 143,
                    "value": 97,
                    "noPlace": true,
                    "code": "a ? 1 : 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ternary.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 1
                        },
                        "end": {
                            "line": 1,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "a ? 1 : 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ternary.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 10
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"4\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 4,
                    "value": 4,
                    "noPlace": true,
                    "code": "a ? 1 : 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ternary.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 10
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"2\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 2,
                    "noPlace": true,
                    "code": "a ? 1 : 2;"
                }
            ],
            "halstead": 4,
            "cyclomatic": 2,
            "maintainability": 97
        },
        {
            "file": "examples/assign_loop.js",
            "maxScore": 9000,
            "score": 28759,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_loop.js",
                    "text": "Unexpected constant condition.",
                    "desc": "Comparing a literal expression in a condition is usually a typo or development trigger for a specific behavior.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "var x;\nwhile (x = 5) {\n\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_loop.js",
                    "text": "Expected a conditional expression and instead saw an assignment.",
                    "desc": "In conditional statements, it is very easy to mistype a comparison operator (such as ==) as an assignment operator (such as =).",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "var x;\nwhile (x = 5) {\n\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_loop.js",
                    "text": "x is defined but never used",
                    "desc": "Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 4
                        },
                        "end": {
                            "line": 1,
                            "column": 4
                        }
                    },
                    "score": 9000,
                    "code": "var x;\nwhile (x = 5) {\n\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_loop.js",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 14
                        },
                        "end": {
                            "line": 4,
                            "column": 1
                        }
                    },
                    "text": "Tomma kodblock ska ej förekomma.",
                    "desc": "Om det är en if/else-if sats, så negera logiken, och ta bort blocket. Annars om syfte saknas så ta bort detta block!.",
                    "score": 1000,
                    "code": "var x;\nwhile (x = 5) {\n\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_loop.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 1
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"86\" [1-100].",
                    "desc": "",
                    "score": 678,
                    "value": 86,
                    "noPlace": true,
                    "code": "var x;\nwhile (x = 5) {\n\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_loop.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 1
                        },
                        "end": {
                            "line": 4,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_loop.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 1
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"31\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 31,
                    "value": 31,
                    "noPlace": true,
                    "code": "var x;\nwhile (x = 5) {\n\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/assign_loop.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 1
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"2\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 2,
                    "noPlace": true,
                    "code": "var x;\nwhile (x = 5) {\n\n}"
                }
            ],
            "halstead": 31,
            "cyclomatic": 2,
            "maintainability": 86
        },
        {
            "file": "examples/non_strict.js",
            "maxScore": 9000,
            "score": 27916,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/non_strict.js",
                    "text": "b is defined but never used",
                    "desc": "Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 5
                        },
                        "end": {
                            "line": 2,
                            "column": 5
                        }
                    },
                    "score": 9000,
                    "code": "var a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/non_strict.js",
                    "text": "Missing \"use strict\" statement.",
                    "desc": "When used globally the entire script, including all contained functions, are strict mode code. It is also possible to specify function-level strict mode, such that strict mode applies only to the function in which the directive occurs. In older browsers this statments has no effect, it is ignored as intended by the ES5.1 standard.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 8
                        },
                        "end": {
                            "line": 1,
                            "column": 8
                        }
                    },
                    "score": 9000,
                    "code": "var a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/non_strict.js",
                    "text": "a is defined but never used",
                    "desc": "Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 4
                        },
                        "end": {
                            "line": 1,
                            "column": 4
                        }
                    },
                    "score": 9000,
                    "code": "var a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/non_strict.js",
                    "text": "Newline is never expected after a \"var\" statement.",
                    "desc": "The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after var statement. It helps the code to look consistent across the entire project.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 500,
                    "code": "var a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/non_strict.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 2
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"96\" [1-100].",
                    "desc": "",
                    "score": 208,
                    "value": 95,
                    "noPlace": true,
                    "code": "var a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/non_strict.js",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 1
                        },
                        "end": {
                            "line": 2,
                            "column": 11
                        }
                    },
                    "text": "'use strict' ska användas.",
                    "desc": "[TODO]",
                    "score": 100,
                    "code": "var a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/non_strict.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 1
                        },
                        "end": {
                            "line": 3,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/non_strict.js",
                    "text": "Missing space before function parentheses.",
                    "desc": "When formatting a function, whitespace is allowed between the function name or function keyword and the opening paren. Named functions also require a space between the function keyword and the function name, but anonymous functions require no whitespace.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 18
                        },
                        "end": {
                            "line": 1,
                            "column": 18
                        }
                    },
                    "score": 50,
                    "code": "var a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/non_strict.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 2
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"8\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 8,
                    "value": 8,
                    "noPlace": true,
                    "code": "var a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/non_strict.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 2
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "var a = function a() {\r\n\tvar b = 1;\r\n};"
                }
            ],
            "halstead": 8,
            "cyclomatic": 1,
            "maintainability": 95
        },
        {
            "file": "examples/console.js",
            "maxScore": 9000,
            "score": 27307,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/console.js",
                    "text": "'console' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "console.log(1);"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/console.js",
                    "text": "\"console\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "console.log(1);"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/console.js",
                    "text": "Unexpected console statement.",
                    "desc": "In JavaScript that is designed to be executed in the browser, it's considered a best practice to avoid using methods on console. Such messages are considered to be for debugging purposes and therefore not suitable to ship to the client. In general, calls using console should be stripped before being pushed to production.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "console.log(1);"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/console.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 15
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"95\" [1-100].",
                    "desc": "",
                    "score": 245,
                    "value": 95,
                    "noPlace": true,
                    "code": "console.log(1);"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/console.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 1
                        },
                        "end": {
                            "line": 1,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "console.log(1);"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/console.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 15
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"12\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 12,
                    "value": 11,
                    "noPlace": true,
                    "code": "console.log(1);"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/console.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 15
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "console.log(1);"
                }
            ],
            "halstead": 11,
            "cyclomatic": 1,
            "maintainability": 95
        },
        {
            "file": "examples/plusplus.js",
            "maxScore": 9000,
            "score": 27131,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/plusplus.js",
                    "text": "'i' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "i++;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/plusplus.js",
                    "text": "\"i\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "i++;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/plusplus.js",
                    "text": "Unary operator '++' used.",
                    "desc": "This rule is aimed at flagging the use of ++ and --. Some believe that the use of these unary operators reduces code quality and clarity. There are some programming languages that completely exclude these operators.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "i++;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/plusplus.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 3
                        }
                    },
                    "text": "+= ska användas istället.",
                    "desc": "Pga att går inte göra fel med post/pre ökning. Samt det går enkelt ändra om ett annat antal ska ökas.",
                    "score": 80,
                    "code": "i++;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/plusplus.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 1
                        },
                        "end": {
                            "line": 1,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "i++;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/plusplus.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 4
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"1\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 1,
                    "value": 1,
                    "noPlace": true,
                    "code": "i++;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/plusplus.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 4
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"100\" [1-100].",
                    "desc": "",
                    "score": 0,
                    "value": 100,
                    "noPlace": true,
                    "code": "i++;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/plusplus.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 4
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "i++;"
                }
            ],
            "halstead": 1,
            "cyclomatic": 1,
            "maintainability": 100
        },
        {
            "file": "examples/this.js",
            "maxScore": 9000,
            "score": 20073,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/this.js",
                    "text": "me is defined but never used",
                    "desc": "Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 5
                        },
                        "end": {
                            "line": 3,
                            "column": 5
                        }
                    },
                    "score": 9000,
                    "code": "\t'use strict';\r\n\tvar me = this;\r\n\r\n\tthis.a = 2;\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/this.js",
                    "text": "fn is defined but never used",
                    "desc": "Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 4
                        },
                        "end": {
                            "line": 1,
                            "column": 4
                        }
                    },
                    "score": 9000,
                    "code": "var fn = function fn() {\r\n\t'use strict';\r\n\tvar me = this;\r\n\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/this.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 6,
                            "column": 2
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"82\" [1-100].",
                    "desc": "",
                    "score": 919,
                    "value": 81,
                    "noPlace": true,
                    "code": "var fn = function fn() {\r\n\t'use strict';\r\n\tvar me = this;\r\n\r\n\tthis.a = 2;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/this.js",
                    "text": "Newline is never expected after a \"var\" statement.",
                    "desc": "The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after var statement. It helps the code to look consistent across the entire project.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 1
                        },
                        "end": {
                            "line": 3,
                            "column": 1
                        }
                    },
                    "score": 500,
                    "code": "\t'use strict';\r\n\tvar me = this;\r\n\r\n\tthis.a = 2;\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/this.js",
                    "text": "Newline is never expected after a \"var\" statement.",
                    "desc": "The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after var statement. It helps the code to look consistent across the entire project.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 500,
                    "code": "var fn = function fn() {\r\n\t'use strict';\r\n\tvar me = this;\r\n\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/this.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 6,
                            "column": 2
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"54\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 54,
                    "value": 53,
                    "noPlace": true,
                    "code": "var fn = function fn() {\r\n\t'use strict';\r\n\tvar me = this;\r\n\r\n\tthis.a = 2;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/this.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 6,
                            "column": 1
                        },
                        "end": {
                            "line": 6,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\tthis.a = 2;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/this.js",
                    "text": "Missing space before function parentheses.",
                    "desc": "When formatting a function, whitespace is allowed between the function name or function keyword and the opening paren. Named functions also require a space between the function keyword and the function name, but anonymous functions require no whitespace.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 20
                        },
                        "end": {
                            "line": 1,
                            "column": 20
                        }
                    },
                    "score": 50,
                    "code": "var fn = function fn() {\r\n\t'use strict';\r\n\tvar me = this;\r\n\r"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/this.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 6,
                            "column": 2
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "var fn = function fn() {\r\n\t'use strict';\r\n\tvar me = this;\r\n\r\n\tthis.a = 2;\r\n};"
                }
            ],
            "halstead": 53,
            "cyclomatic": 1,
            "maintainability": 81
        },
        {
            "file": "examples/empty_block.js",
            "maxScore": 9000,
            "score": 19556,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_block.js",
                    "text": "'x' is not defined.",
                    "desc": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 4
                        },
                        "end": {
                            "line": 1,
                            "column": 4
                        }
                    },
                    "score": 9000,
                    "code": "if (x) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_block.js",
                    "text": "\"x\" used outside of binding context.",
                    "desc": "Variables should not be used outside of the block in which they were defined. This emulates C-style block scope, which minimizers the risk of errors of less experianced js programmers.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 4
                        },
                        "end": {
                            "line": 1,
                            "column": 4
                        }
                    },
                    "score": 9000,
                    "code": "if (x) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_block.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 7
                        },
                        "end": {
                            "line": 3,
                            "column": 1
                        }
                    },
                    "text": "Tomma kodblock ska ej förekomma.",
                    "desc": "Om det är en if/else-if sats, så negera logiken, och ta bort blocket. Annars om syfte saknas så ta bort detta block!.",
                    "score": 1000,
                    "code": "if (x) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_block.js",
                    "text": "Trailing spaces not allowed.",
                    "desc": "Sometimes in the course of editing files, you can end up with extra whitespace at the end of lines. These whitespace differences can be picked up by source control systems and flagged as diffs, causing frustration for developers. While this extra whitespace causes no functional issues, many code conventions require that trailing spaces be removed before checkin.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 1
                        },
                        "end": {
                            "line": 2,
                            "column": 1
                        }
                    },
                    "score": 500,
                    "code": "if (x) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_block.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 1
                        },
                        "end": {
                            "line": 3,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_block.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 1
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"100\" [1-100].",
                    "desc": "",
                    "score": 5,
                    "value": 99,
                    "noPlace": true,
                    "code": "if (x) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_block.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 1
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"1\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 1,
                    "value": 1,
                    "noPlace": true,
                    "code": "if (x) {\n\t\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_block.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 1
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"2\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 2,
                    "noPlace": true,
                    "code": "if (x) {\n\t\n}"
                }
            ],
            "halstead": 1,
            "cyclomatic": 2,
            "maintainability": 99
        },
        {
            "file": "examples/global_strict.js",
            "maxScore": 9000,
            "score": 18916,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/global_strict.js",
                    "text": "b is defined but never used",
                    "desc": "Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 5
                        },
                        "end": {
                            "line": 3,
                            "column": 5
                        }
                    },
                    "score": 9000,
                    "code": "var a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/global_strict.js",
                    "text": "a is defined but never used",
                    "desc": "Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 4
                        },
                        "end": {
                            "line": 2,
                            "column": 4
                        }
                    },
                    "score": 9000,
                    "code": "'use strict';\r\nvar a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/global_strict.js",
                    "text": "Newline is never expected after a \"var\" statement.",
                    "desc": "The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after var statement. It helps the code to look consistent across the entire project.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 500,
                    "code": "'use strict';\r\nvar a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/global_strict.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 2
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"96\" [1-100].",
                    "desc": "",
                    "score": 208,
                    "value": 95,
                    "noPlace": true,
                    "code": "'use strict';\r\nvar a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/global_strict.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 2
                        }
                    },
                    "text": "\"use strict\" bör endast användas i funktions context och inte per js fil.",
                    "desc": "Pga vid minifiering så slutar \"use strict\" fungera. Eller så kan \"use strict\" slå till på tredjeparts kod som är crap.",
                    "score": 100,
                    "code": "'use strict';\r\nvar a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/global_strict.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 1
                        },
                        "end": {
                            "line": 4,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/global_strict.js",
                    "text": "Missing space before function parentheses.",
                    "desc": "When formatting a function, whitespace is allowed between the function name or function keyword and the opening paren. Named functions also require a space between the function keyword and the function name, but anonymous functions require no whitespace.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 18
                        },
                        "end": {
                            "line": 2,
                            "column": 18
                        }
                    },
                    "score": 50,
                    "code": "'use strict';\r\nvar a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/global_strict.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 2
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"8\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 8,
                    "value": 8,
                    "noPlace": true,
                    "code": "'use strict';\r\nvar a = function a() {\r\n\tvar b = 1;\r\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/global_strict.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 2
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "'use strict';\r\nvar a = function a() {\r\n\tvar b = 1;\r\n};"
                }
            ],
            "halstead": 8,
            "cyclomatic": 1,
            "maintainability": 95
        },
        {
            "file": "examples/label.js",
            "maxScore": 9000,
            "score": 18051,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/label.js",
                    "text": "Unexpected labeled statement.",
                    "desc": "This rule aims to eliminate the use of labeled statements in JavaScript. It will warn whenever a labeled statement is encountered and whenever break or continue are used with a label.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "var x;\na: x = 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/label.js",
                    "text": "x is defined but never used",
                    "desc": "Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 4
                        },
                        "end": {
                            "line": 1,
                            "column": 4
                        }
                    },
                    "score": 9000,
                    "code": "var x;\na: x = 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/label.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 1
                        },
                        "end": {
                            "line": 2,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "var x;\na: x = 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/label.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 9
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"1\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 1,
                    "value": 1,
                    "noPlace": true,
                    "code": "var x;\na: x = 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/label.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 9
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"100\" [1-100].",
                    "desc": "",
                    "score": 0,
                    "value": 100,
                    "noPlace": true,
                    "code": "var x;\na: x = 2;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/label.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 9
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "var x;\na: x = 2;"
                }
            ],
            "halstead": 1,
            "cyclomatic": 1,
            "maintainability": 100
        },
        {
            "file": "examples/sequence.js",
            "maxScore": 9000,
            "score": 18050,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/sequence.js",
                    "text": "Unexpected use of comma operator.",
                    "desc": "The comma operator includes multiple expressions where only one is expected. It evaluates each operand from left to right and returns the value of the last operand. However, this frequently obscures side effects, and its use is often an accident.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1,2,3;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/sequence.js",
                    "text": "Expected an assignment or function call and instead saw an expression.",
                    "desc": "Unused expressions are those expressions that evaluate to a value but are never used. ",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "1,2,3;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/sequence.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 1
                        },
                        "end": {
                            "line": 1,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "1,2,3;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/sequence.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 6
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"100\" [1-100].",
                    "desc": "",
                    "score": 0,
                    "value": 100,
                    "noPlace": true,
                    "code": "1,2,3;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/sequence.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 6
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "1,2,3;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/sequence.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 6
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"0\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 0,
                    "value": 0,
                    "noPlace": true,
                    "code": "1,2,3;"
                }
            ],
            "halstead": 0,
            "cyclomatic": 1,
            "maintainability": 100
        },
        {
            "file": "examples/with.js",
            "maxScore": 15000,
            "score": 16209,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/with.js",
                    "text": "Unexpected use of 'with' statement.",
                    "desc": "The with statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to. Additionally, the with statement cannot be used in strict mode.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 0
                        }
                    },
                    "score": 15000,
                    "code": "var o = {};\r\nwith (o) {\r\n\to.a = 1;\r\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/with.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 1
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"80\" [1-100].",
                    "desc": "",
                    "score": 1016,
                    "value": 79,
                    "noPlace": true,
                    "code": "var o = {};\r\nwith (o) {\r\n\to.a = 1;\r\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/with.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 1
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"143\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 143,
                    "value": 142,
                    "noPlace": true,
                    "code": "var o = {};\r\nwith (o) {\r\n\to.a = 1;\r\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/with.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 1
                        },
                        "end": {
                            "line": 4,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\to.a = 1;\r\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/with.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 1
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "var o = {};\r\nwith (o) {\r\n\to.a = 1;\r\n}"
                }
            ],
            "halstead": 142,
            "cyclomatic": 1,
            "maintainability": 79
        },
        {
            "file": "examples/long_file.js",
            "maxScore": 9000,
            "score": 10766,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/long_file.js",
                    "text": "o is defined but never used",
                    "desc": "Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.",
                    "loc": {
                        "start": {
                            "line": 351,
                            "column": 4
                        },
                        "end": {
                            "line": 351,
                            "column": 4
                        }
                    },
                    "score": 9000,
                    "code": "\r\nvar o = 1;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/long_file.js",
                    "text": "Newline is never expected after a \"var\" statement.",
                    "desc": "The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after var statement. It helps the code to look consistent across the entire project.",
                    "loc": {
                        "start": {
                            "line": 351,
                            "column": 0
                        },
                        "end": {
                            "line": 351,
                            "column": 0
                        }
                    },
                    "score": 500,
                    "code": "\r\nvar o = 1;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/long_file.js",
                    "text": "Multiple blank lines not allowed.",
                    "desc": "Max 2 lines of empty lines should be used. Some developers prefer to have multiple blank lines removed, while others feel that it helps improve readability. Whitespace is useful for separating logical sections of code, but excess whitespace takes up more of the screen.",
                    "loc": {
                        "start": {
                            "line": 350,
                            "column": 0
                        },
                        "end": {
                            "line": 350,
                            "column": 0
                        }
                    },
                    "score": 500,
                    "code": "\r\n\r\nvar o = 1;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/long_file.js",
                    "loc": {
                        "start": {
                            "line": 351,
                            "column": 0
                        },
                        "end": {
                            "line": 351,
                            "column": 10
                        }
                    },
                    "text": "En fil bör inte ha mer än 350 rader.",
                    "desc": "Bryt isär filen till fler mindre filer.",
                    "score": 500,
                    "code": "\r\nvar o = 1;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/long_file.js",
                    "loc": {
                        "start": {
                            "line": 351,
                            "column": 0
                        },
                        "end": {
                            "line": 351,
                            "column": 10
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"96\" [1-100].",
                    "desc": "",
                    "score": 208,
                    "value": 95,
                    "noPlace": true,
                    "code": "\r\nvar o = 1;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/long_file.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 351,
                            "column": 1
                        },
                        "end": {
                            "line": 351,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\r\nvar o = 1;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/long_file.js",
                    "loc": {
                        "start": {
                            "line": 351,
                            "column": 0
                        },
                        "end": {
                            "line": 351,
                            "column": 10
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"8\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 8,
                    "value": 8,
                    "noPlace": true,
                    "code": "\r\nvar o = 1;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/long_file.js",
                    "loc": {
                        "start": {
                            "line": 351,
                            "column": 0
                        },
                        "end": {
                            "line": 351,
                            "column": 10
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "\r\nvar o = 1;"
                }
            ],
            "halstead": 8,
            "cyclomatic": 1,
            "maintainability": 95
        },
        {
            "file": "examples/nan.js",
            "maxScore": 9000,
            "score": 10240,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nan.js",
                    "text": "Use the isNaN function to compare with NaN.",
                    "desc": "In JavaScript, NaN is a special value of the Number type. It's used to represent any of the \"not-a-number\" values represented by the double-precision 64-bit format as specified by the IEEE Standard for Binary Floating-Point Arithmetic. NaN has the unique property of not being equal to anything, including itself. That is to say, that the condition NaN !== NaN evaluates to true.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 4
                        },
                        "end": {
                            "line": 3,
                            "column": 4
                        }
                    },
                    "score": 9000,
                    "code": "var x,d;\nif (NaN === x) {\n\td();\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nan.js",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 5,
                            "column": 1
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"78\" [1-100].",
                    "desc": "",
                    "score": 1105,
                    "value": 77,
                    "noPlace": true,
                    "code": "\nvar x,d;\nif (NaN === x) {\n\td();\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nan.js",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 5,
                            "column": 1
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"84\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 84,
                    "value": 84,
                    "noPlace": true,
                    "code": "\nvar x,d;\nif (NaN === x) {\n\td();\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nan.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 1
                        },
                        "end": {
                            "line": 5,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\td();\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nan.js",
                    "text": "Variables within the same declaration block should be sorted alphabetically",
                    "desc": "When declaring multiple variables within the same block, some developers prefer to sort variable names alphabetically to be able to find necessary variable easier at the later time.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 6
                        },
                        "end": {
                            "line": 2,
                            "column": 6
                        }
                    },
                    "score": 1,
                    "code": "\nvar x,d;\nif (NaN === x) {\n\td();"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nan.js",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 0
                        },
                        "end": {
                            "line": 5,
                            "column": 1
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"2\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 2,
                    "noPlace": true,
                    "code": "\nvar x,d;\nif (NaN === x) {\n\td();\n}"
                }
            ],
            "halstead": 84,
            "cyclomatic": 2,
            "maintainability": 77
        },
        {
            "file": "examples/ok_file.js",
            "maxScore": 9000,
            "score": 10235,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ok_file.js",
                    "text": "add is defined but never used",
                    "desc": "Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 4
                        },
                        "end": {
                            "line": 1,
                            "column": 4
                        }
                    },
                    "score": 9000,
                    "code": "var add = function addFn (x, y) {\n\t'use strict';\n\treturn x + y;\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ok_file.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 2
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"87\" [1-100].",
                    "desc": "",
                    "score": 658,
                    "value": 86,
                    "noPlace": true,
                    "code": "var add = function addFn (x, y) {\n\t'use strict';\n\treturn x + y;\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ok_file.js",
                    "text": "Newline is never expected after a \"var\" statement.",
                    "desc": "The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after var statement. It helps the code to look consistent across the entire project.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 500,
                    "code": "var add = function addFn (x, y) {\n\t'use strict';\n\treturn x + y;\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ok_file.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 4,
                            "column": 1
                        },
                        "end": {
                            "line": 4,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\treturn x + y;\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ok_file.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 2
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"27\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 27,
                    "value": 27,
                    "noPlace": true,
                    "code": "var add = function addFn (x, y) {\n\t'use strict';\n\treturn x + y;\n};"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/ok_file.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 4,
                            "column": 2
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "var add = function addFn (x, y) {\n\t'use strict';\n\treturn x + y;\n};"
                }
            ],
            "halstead": 27,
            "cyclomatic": 1,
            "maintainability": 86
        },
        {
            "file": "examples/native_prototype.js",
            "maxScore": 9000,
            "score": 9358,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/native_prototype.js",
                    "text": "Object prototype is read only, properties should not be added.",
                    "desc": "In JavaScript, you can extend any object, including builtin or \"native\" objects. Sometimes people change the behavior of these native objects in ways that break the assumptions made about them in other parts of the code.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "Object.prototype.a = 1;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/native_prototype.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 23
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"94\" [1-100].",
                    "desc": "",
                    "score": 290,
                    "value": 94,
                    "noPlace": true,
                    "code": "Object.prototype.a = 1;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/native_prototype.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 1
                        },
                        "end": {
                            "line": 1,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "Object.prototype.a = 1;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/native_prototype.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 23
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"18\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 18,
                    "value": 18,
                    "noPlace": true,
                    "code": "Object.prototype.a = 1;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/native_prototype.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 23
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "Object.prototype.a = 1;"
                }
            ],
            "halstead": 18,
            "cyclomatic": 1,
            "maintainability": 94
        },
        {
            "file": "examples/parseInt.js",
            "maxScore": 9000,
            "score": 9139,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/parseInt.js",
                    "text": "Missing radix parameter.",
                    "desc": "When using the parseInt() function it is common to omit the second argument, the radix, and let the function try to determine from the first argument what type of number it is. By default, parseInt() will autodetect decimal and hexadecimal (via 0x prefix). Prior to ECMAScript 5, parseInt() also autodetected octal literals, which caused problems because many developers assumed a leading 0 would be ignored.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "parseInt('010');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/parseInt.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 16
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"98\" [1-100].",
                    "desc": "",
                    "score": 87,
                    "value": 98,
                    "noPlace": true,
                    "code": "parseInt('010');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/parseInt.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 1
                        },
                        "end": {
                            "line": 1,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "parseInt('010');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/parseInt.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 16
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"2\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 2,
                    "value": 2,
                    "noPlace": true,
                    "code": "parseInt('010');"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/parseInt.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 16
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "parseInt('010');"
                }
            ],
            "halstead": 2,
            "cyclomatic": 1,
            "maintainability": 98
        },
        {
            "file": "examples/debugger.js",
            "maxScore": 9000,
            "score": 9050,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/debugger.js",
                    "text": "Unexpected 'debugger' statement.",
                    "desc": "The debugger statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code. This has fallen out of favor as a good practice with the advent of modern debugging and development tools. Production code should definitely not contain debugger, as it will cause the browser to stop executing code and open an appropriate debugger.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "debugger;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/debugger.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 1
                        },
                        "end": {
                            "line": 1,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "debugger;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/debugger.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 9
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"100\" [1-100].",
                    "desc": "",
                    "score": 0,
                    "value": 100,
                    "noPlace": true,
                    "code": "debugger;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/debugger.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 9
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "debugger;"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/debugger.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 9
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"0\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 0,
                    "value": 0,
                    "noPlace": true,
                    "code": "debugger;"
                }
            ],
            "halstead": 0,
            "cyclomatic": 1,
            "maintainability": 100
        },
        {
            "file": "examples/multiline_string.js",
            "maxScore": 9000,
            "score": 9050,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/multiline_string.js",
                    "text": "Multiline support is limited to browsers supporting ES5 only.",
                    "desc": "Multiline strings should not be used. Some consider this to be a bad practice as it was an undocumented feature of JavaScript that was only formalized later. If a space is efter the escape character then there is an error, wich is realy hard to spot.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 0
                        }
                    },
                    "score": 9000,
                    "code": "'123\\\r\n456';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/multiline_string.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 2,
                            "column": 1
                        },
                        "end": {
                            "line": 2,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "'123\\\r\n456';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/multiline_string.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 5
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"100\" [1-100].",
                    "desc": "",
                    "score": 0,
                    "value": 100,
                    "noPlace": true,
                    "code": "'123\\\r\n456';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/multiline_string.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 5
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "'123\\\r\n456';"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/multiline_string.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 2,
                            "column": 5
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"0\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 0,
                    "value": 0,
                    "noPlace": true,
                    "code": "'123\\\r\n456';"
                }
            ],
            "halstead": 0,
            "cyclomatic": 1,
            "maintainability": 100
        },
        {
            "file": "examples/nested_try_catch.js",
            "maxScore": 1075,
            "score": 1697,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nested_try_catch.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 13,
                            "column": 1
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"79\" [1-100].",
                    "desc": "",
                    "score": 1075,
                    "value": 78,
                    "noPlace": true,
                    "code": "var d;\ntry {\n\t(function myClosureFn() {\n\t\t'use strict';\n\t\ttry {\n\t\t\td();\n\t\t} catch (e) {\n\t\t\td();\n\t\t}\n\t}());\n} catch (e) {\n\td();\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nested_try_catch.js",
                    "loc": {
                        "start": {
                            "line": 5,
                            "column": 2
                        },
                        "end": {
                            "line": 9,
                            "column": 3
                        }
                    },
                    "text": "Try-Catch block ska ej nästlas.",
                    "desc": "Använd en Try-Catch så långt upp i call hiarkin som möjligt som fångar alla exceptions.",
                    "score": 500,
                    "code": "\t\t'use strict';\n\t\ttry {\n\t\t\td();\n\t\t} catch (e) {\n\t\t\td();\n\t\t}\n\t}());\n} catch (e) {"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nested_try_catch.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 13,
                            "column": 1
                        },
                        "end": {
                            "line": 13,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\td();\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nested_try_catch.js",
                    "text": "Missing space before function parentheses.",
                    "desc": "When formatting a function, whitespace is allowed between the function name or function keyword and the opening paren. Named functions also require a space between the function keyword and the function name, but anonymous functions require no whitespace.",
                    "loc": {
                        "start": {
                            "line": 3,
                            "column": 22
                        },
                        "end": {
                            "line": 3,
                            "column": 22
                        }
                    },
                    "score": 50,
                    "code": "try {\n\t(function myClosureFn() {\n\t\t'use strict';\n\t\ttry {"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nested_try_catch.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 13,
                            "column": 1
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"22\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 22,
                    "value": 21,
                    "noPlace": true,
                    "code": "var d;\ntry {\n\t(function myClosureFn() {\n\t\t'use strict';\n\t\ttry {\n\t\t\td();\n\t\t} catch (e) {\n\t\t\td();\n\t\t}\n\t}());\n} catch (e) {\n\td();\n}"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/nested_try_catch.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 13,
                            "column": 1
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"2\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 2,
                    "noPlace": true,
                    "code": "var d;\ntry {\n\t(function myClosureFn() {\n\t\t'use strict';\n\t\ttry {\n\t\t\td();\n\t\t} catch (e) {\n\t\t\td();\n\t\t}\n\t}());\n} catch (e) {\n\td();\n}"
                }
            ],
            "halstead": 21,
            "cyclomatic": 2,
            "maintainability": 78
        },
        {
            "file": "examples/empty_file.js",
            "maxScore": 1000,
            "score": 1000,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_file.js",
                    "loc": {
                        "start": {
                            "line": 0,
                            "column": 0
                        },
                        "end": {
                            "line": 0,
                            "column": 0
                        }
                    },
                    "text": "Tomma javascript filer ska ej förekomma.",
                    "desc": "Det orsakar tidsslöseri när man navigerar runnt i koden. Ta bort fil eller byt filändelse.",
                    "score": 1000,
                    "code": ""
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_file.js",
                    "loc": {
                        "start": {
                            "line": 0,
                            "column": 0
                        },
                        "end": {
                            "line": 0,
                            "column": 0
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"100\" [1-100].",
                    "desc": "",
                    "score": 0,
                    "value": 100,
                    "noPlace": true,
                    "code": ""
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_file.js",
                    "loc": {
                        "start": {
                            "line": 0,
                            "column": 0
                        },
                        "end": {
                            "line": 0,
                            "column": 0
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": ""
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/empty_file.js",
                    "loc": {
                        "start": {
                            "line": 0,
                            "column": 0
                        },
                        "end": {
                            "line": 0,
                            "column": 0
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"0\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 0,
                    "value": 0,
                    "noPlace": true,
                    "code": ""
                }
            ],
            "halstead": 0,
            "cyclomatic": 1,
            "maintainability": 100
        },
        {
            "file": "examples/double_qoute.js",
            "maxScore": 100,
            "score": 150,
            "errors": [
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/double_qoute.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 6
                        }
                    },
                    "text": "Enkel citattecken ' ska användas istället för dubbel \"",
                    "desc": "Så all kod är konsikvent. Och enkelcitattecken är enklare att skriva.",
                    "score": 100,
                    "code": "\"test\";"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/double_qoute.js",
                    "text": "Newline required at end of file but not found.",
                    "desc": "Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts. This rule enforces newlines for all non-empty programs.",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 1
                        },
                        "end": {
                            "line": 1,
                            "column": 1
                        }
                    },
                    "score": 50,
                    "code": "\"test\";"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/double_qoute.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 7
                        }
                    },
                    "type": "maintainability",
                    "text": "Maintainability på \"100\" [1-100].",
                    "desc": "",
                    "score": 0,
                    "value": 100,
                    "noPlace": true,
                    "code": "\"test\";"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/double_qoute.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 7
                        }
                    },
                    "type": "cyclomatic",
                    "text": "Cyclomatiskkomplexitet på \"1\".",
                    "desc": "Anger antal kodvägar (\"branchingfactor\") på koden. Koden blir svår att ha en metal modell om för hög.",
                    "score": 0,
                    "value": 1,
                    "noPlace": true,
                    "code": "\"test\";"
                },
                {
                    "file": "/Users/mattiasfestin/Repositories/Vulcan-JSLinter/examples/double_qoute.js",
                    "loc": {
                        "start": {
                            "line": 1,
                            "column": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 7
                        }
                    },
                    "type": "halstead",
                    "text": "Halstead effort på \"0\".",
                    "desc": "Anger tid som behöver läggas på underhålla komplexiteten. (Baserad på statistisk analys av frekvensen av nedlagd tid, antal buggar och komplexitet).",
                    "score": 0,
                    "value": 0,
                    "noPlace": true,
                    "code": "\"test\";"
                }
            ],
            "halstead": 0,
            "cyclomatic": 1,
            "maintainability": 100
        }
    ],
    "maxScore": 147435,
    "nbrFiles": 30,
    "nbrErrors": 253,
    "avgScore": 4087.0355731225295,
    "rmsScore": 8045.917988929851,
    "halstead": 338.51582927045916,
    "cyclomatic": 1.4605934866804429,
    "maintainability": 89.3940713917875
}